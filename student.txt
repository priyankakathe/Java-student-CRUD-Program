CREATE DATABASE 'student';
USE Student;

create table Student (
    student_No  INT(3) NOT NULL AUTO_INCREMENT,
    student_name TEXT(30) NOT NULL,
    student_DOB DATE,
    student_DOJ DATE,
    PRIMARY KEY (student_No)
);

************************************


package net.javaguides.studentmanagement.student;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import net.javaguides.studentmanagement.model.User;


public class Student {
    private String jdbcURL = "jdbc:mysql://localhost:3306/demo?useSSL=false";
    private String jdbcUsername = "root";
    private String jdbcPassword = "root";

    private static final String INSERT_Student_SQL = "INSERT INTO Student" + "  (Student_no, Student_name, Student_DOB,Student_DOJ) VALUES " +
        " (?, ?, ?);";

    private static final String SELECT_STUDENT_BY_NO = "select Student_no, Student_name, Student_DOB,Student_DOJ from student where Student_no =?";
    private static final String SELECT_ALL_STUDENT = "select * from Student";
    private static final String DELETE_STUDENT_SQL = "delete from Student where Student_no = ?;";
    private static final String UPDATE_STUDENT_SQL = "update Student set Student_no = ?,Student_name= ?,Student_DOB =?, Student_DOJ =? where Student_no = ?;";

    public Student() {}

    protected Connection getConnection() {
        Connection connection = null;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            connection = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);
        } catch (SQLException e) {
            
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
           
            e.printStackTrace();
        }
        return connection;
    }

    public void insertStudent(Student student) throws SQLException {
        System.out.println(INSERT_STUDENT_SQL);
        
        try (Connection connection = getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(INSERT_STUDENT_SQL)) {
            preparedStatement.setINTEGER(1, Student.getNo());
            preparedStatement.setSTRING(2, Student.getName());
            preparedStatement.setINTEGER(3, Student.getDOB());
            preparedStatement.setINTEGER(3, Student.getDOJ());
            System.out.println(preparedStatement);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            printSQLException(e);
        }
    }

    public Student selectStudent(int Student_No) {
       Student student = null;
       
        try (Connection connection = getConnection();
            
            PreparedStatement preparedStatement = connection.prepareStatement(SELECT_STUDENT_BY_Student_No);) {
            preparedStatement.setInt(1, Student_No);
            System.out.println(preparedStatement);
            
            ResultSet rs = preparedStatement.executeQuery();

            
            while (rs.next()) {
                Integer Student_No= rs.getINTEGER("Student_No");
                String name = rs.getString("Name");
                Integer Student_DOB = rs.getINTEGER("Student_DOB");
                Integer Student_DOJ = rs.getINTEGER("Student_DOJ");
                Student = new Student(Student_no, Student_name, Student_DOB,Student_DOJ);
            }
        } catch (SQLException e) {
            printSQLException(e);
        }
        return user;
    }

    public List < Student > selectAllStudent() {

       
        List < Student > Student = new ArrayList < > ();
       
        try (Connection connection = getConnection();

            
            PreparedStatement preparedStatement = connection.prepareStatement(SELECT_ALL_STUDENTS);) {
            System.out.println(preparedStatement);
            
            ResultSet rs = preparedStatement.executeQuery();

            
            while (rs.next()) {
                int Student_No = rs.getInt("Student_No");
                String Student_Name = rs.getString("Student_Name");
                Integer Student_DOB = rs.getINTEGER("Student_DOB");
                Integer Student_DOJ = rs.getINTEGER("Student_DOJ");
                Student.add(new Student(Student_no, Student_name, Student_DOB,Student_DOJ));
            }
        } catch (SQLException e) {
            printSQLException(e);
        }
        return Student;
    }

    public boolean deleteStudent(int Student_No) throws SQLException {
        boolean rowDeleted;
        try (Connection connection = getConnection(); PreparedStatement statement = connection.prepareStatement(DELETE_STUDENT_SQL);) {
            statement.setInt(1, id);
            rowDeleted = statement.executeUpdate() > 0;
        }
        return rowDeleted;
    }

    public boolean updateStudent(Student student) throws SQLException {
        boolean rowUpdated;
        try (Connection connection = getConnection(); PreparedStatement statement = connection.prepareStatement(UPDATE_STUDENT_SQL);) {
            statement.setInteger(1, Student.getStudent_No())
            statement.setString(1, Student.getStudent_Name());
            statement.setInteger(2, user.getStudent_DOB());
            statement.setInteger(3, user.getStudent_DOJ());
            statement.setInt(4, student.getStudent_No());

            rowUpdated = statement.executeUpdate() > 0;
        }
        return rowUpdated;
    }

    private void printSQLException(SQLException ex) {
        for (Throwable e: ex) {
            if (e instanceof SQLException) {
                e.printStackTrace(System.err);
                System.err.println("SQLState: " + ((SQLException) e).getSQLState());
                System.err.println("Error Code: " + ((SQLException) e).getErrorCode());
                System.err.println("Message: " + e.getMessage());
                Throwable t = ex.getCause();
                while (t != null) {
                    System.out.println("Cause: " + t);
                    t = t.getCause();
                }
            }
        }
    }
}
